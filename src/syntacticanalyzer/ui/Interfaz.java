package syntacticanalyzer.ui;

import java.awt.Event;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Document;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import syntacticanalyzer.backend.LexicControl;
import syntacticanalyzer.backend.SyntacticControl;
import syntacticanalyzer.backend.archivos.ControladorArchivo;
import syntacticanalyzer.backend.lexemas.ErrorLexico;
import syntacticanalyzer.backend.lexemas.ErrorSintactico;
import syntacticanalyzer.backend.lexemas.TokenValido;

/**
 *
 * @author asael
 */
public class Interfaz extends javax.swing.JFrame {

    private final ControladorArchivo file = new ControladorArchivo();
    private LexicControl lc;
    private SyntacticControl sc;
    private static boolean withoutChange = true;
    private static String path = "";

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        validarCierre();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reporteToken = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTokens = new javax.swing.JTable();
        reporteErrores = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableErrores = new javax.swing.JTable();
        reporteErroresS = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableErroresS = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        cordCursor = new javax.swing.JLabel();
        btnAnalizar = new javax.swing.JButton();
        btnReport = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        itemAbrir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        itemNuevo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        itemGuardar = new javax.swing.JMenuItem();
        itemGuardarComo = new javax.swing.JMenuItem();
        menuEditar = new javax.swing.JMenu();
        itemDeshacer = new javax.swing.JMenuItem();
        itemRehacer = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        itemCortar = new javax.swing.JMenuItem(new DefaultEditorKit.CutAction());
        itemCopiar = new javax.swing.JMenuItem(new DefaultEditorKit.CopyAction());
        itemPegar = new javax.swing.JMenuItem(new DefaultEditorKit.PasteAction());
        menuAyuda = new javax.swing.JMenu();
        itemAyuda = new javax.swing.JMenuItem();
        itemAcerca = new javax.swing.JMenuItem();

        reporteToken.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        reporteToken.setTitle("Reporte Tokens Validos");
        reporteToken.setModal(true);
        reporteToken.setSize(new java.awt.Dimension(632, 370));

        tableTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre del Token", "Lexema", "Posicion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableTokens);

        javax.swing.GroupLayout reporteTokenLayout = new javax.swing.GroupLayout(reporteToken.getContentPane());
        reporteToken.getContentPane().setLayout(reporteTokenLayout);
        reporteTokenLayout.setHorizontalGroup(
            reporteTokenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporteTokenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        reporteTokenLayout.setVerticalGroup(
            reporteTokenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporteTokenLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        reporteErrores.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        reporteErrores.setTitle("Errores");
        reporteErrores.setModal(true);
        reporteErrores.setSize(new java.awt.Dimension(632, 370));

        tableErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Posicion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableErrores);

        javax.swing.GroupLayout reporteErroresLayout = new javax.swing.GroupLayout(reporteErrores.getContentPane());
        reporteErrores.getContentPane().setLayout(reporteErroresLayout);
        reporteErroresLayout.setHorizontalGroup(
            reporteErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporteErroresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        reporteErroresLayout.setVerticalGroup(
            reporteErroresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporteErroresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        reporteErroresS.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        reporteErroresS.setTitle("Reporte Errores Sintacticos");
        reporteErroresS.setSize(new java.awt.Dimension(632, 370));

        tableErroresS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Descripcion del error", "Posicion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableErroresS);

        javax.swing.GroupLayout reporteErroresSLayout = new javax.swing.GroupLayout(reporteErroresS.getContentPane());
        reporteErroresS.getContentPane().setLayout(reporteErroresSLayout);
        reporteErroresSLayout.setHorizontalGroup(
            reporteErroresSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporteErroresSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        reporteErroresSLayout.setVerticalGroup(
            reporteErroresSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporteErroresSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setSize(new java.awt.Dimension(600, 400));

        areaTexto.setBackground(new java.awt.Color(14, 23, 39));
        areaTexto.setColumns(20);
        areaTexto.setForeground(new java.awt.Color(204, 204, 204));
        areaTexto.setRows(5);
        areaTexto.setCaretColor(new java.awt.Color(255, 255, 255));
        UndoManager undoManager = new UndoManager();
        Document doc = areaTexto.getDocument();

        doc.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.addEdit(e.getEdit());
            }
        });
        areaTexto.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                areaTextoCaretUpdate(evt);
            }
        });
        KeyStroke undoKeyStroke = KeyStroke.getKeyStroke(
            KeyEvent.VK_Z, Event.CTRL_MASK);
        KeyStroke redoKeyStroke = KeyStroke.getKeyStroke(
            KeyEvent.VK_Y, Event.CTRL_MASK);

        // Map undo action
        areaTexto.getInputMap(areaTexto.WHEN_IN_FOCUSED_WINDOW)
        .put(undoKeyStroke, "undoKeyStroke");
        areaTexto.getActionMap().put("undoKeyStroke", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    undoManager.undo();
                } catch (CannotUndoException cue) {}
            }
        });
        // Map redo action
        areaTexto.getInputMap(areaTexto.WHEN_IN_FOCUSED_WINDOW)
        .put(redoKeyStroke, "redoKeyStroke");
        areaTexto.getActionMap().put("redoKeyStroke", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    undoManager.redo();
                } catch (CannotRedoException cre) {}
            }
        });

        areaTexto.getDocument().addDocumentListener(new CambiosListener());
        jScrollPane2.setViewportView(areaTexto);

        cordCursor.setText("Linea: 1 - Columna: 1");

        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        btnReport.setText("Reporte Tokens");
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAnalizar)
                .addGap(18, 18, 18)
                .addComponent(btnReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                .addComponent(cordCursor)
                .addContainerGap())
            .addComponent(jScrollPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cordCursor)
                    .addComponent(btnAnalizar)
                    .addComponent(btnReport))
                .addContainerGap())
        );

        menuArchivo.setText("Archivo");

        itemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        itemAbrir.setText("Abrir");
        itemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(itemAbrir);
        menuArchivo.add(jSeparator1);

        itemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        itemNuevo.setText("Nuevo");
        itemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(itemNuevo);
        menuArchivo.add(jSeparator2);

        itemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        itemGuardar.setText("Guardar");
        itemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(itemGuardar);

        itemGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        itemGuardarComo.setText("Guardar Como");
        itemGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(itemGuardarComo);

        jMenuBar1.add(menuArchivo);

        menuEditar.setText("Editar");

        itemDeshacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        itemDeshacer.setText("Deshacer");
        itemDeshacer.addActionListener((ActionEvent e) -> {
            try {
                undoManager.undo();
            } catch (CannotUndoException cue) {}
        });
        menuEditar.add(itemDeshacer);

        itemRehacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        itemRehacer.setText("Rehacer");
        itemRehacer.addActionListener((ActionEvent e) -> {
            try {
                undoManager.redo();
            } catch (CannotRedoException cre) {}
        });
        menuEditar.add(itemRehacer);
        menuEditar.add(jSeparator3);

        itemCortar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        itemCortar.setText("Cortar");
        menuEditar.add(itemCortar);

        itemCopiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        itemCopiar.setText("Copiar");
        menuEditar.add(itemCopiar);

        itemPegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        itemPegar.setText("Pegar");
        menuEditar.add(itemPegar);

        jMenuBar1.add(menuEditar);

        menuAyuda.setText("Ayuda");

        itemAyuda.setText("Ayuda");
        menuAyuda.add(itemAyuda);

        itemAcerca.setText("Acerca de");
        itemAcerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAcercaActionPerformed(evt);
            }
        });
        menuAyuda.add(itemAcerca);

        jMenuBar1.add(menuAyuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Evento utilizado para conocer la posicion del cursor en el area de texto 
    private void areaTextoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_areaTextoCaretUpdate
        javax.swing.JTextArea editArea = (javax.swing.JTextArea) evt.getSource();
        int linea = 1;
        int columna = 1;

        try {
            int caretPos = editArea.getCaretPosition();
            linea = editArea.getLineOfOffset(caretPos);
            columna = caretPos - editArea.getLineStartOffset(linea);
            linea += 1;
            columna += 1;
        } catch (Exception e) {
        }
        cordCursor.setText("Linea: " + linea + " - Columna: " + columna);
    }//GEN-LAST:event_areaTextoCaretUpdate

    //Abre un nuevo archivo, validando si el actual ya esta guardado
    private void itemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAbrirActionPerformed
        if (withoutChange) {
            withoutChange = false;
            JFileChooser fc = new JFileChooser();
            fc.showOpenDialog(this);
            try {
                path = fc.getSelectedFile().getAbsolutePath();
                areaTexto.setText(file.readFile(path));
                withoutChange = true;
            } catch (Exception e) {
                System.out.println("se cancelo");
            }
        } else {
            cambiosSinGuardar(evt, 1);
        }
    }//GEN-LAST:event_itemAbrirActionPerformed

    //Crea un nuevo archivo valida si el actual ya esta guardado
    private void itemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNuevoActionPerformed
        if (withoutChange) {
            areaTexto.setText("");
            path = "";
            withoutChange = true;
        } else {
            cambiosSinGuardar(evt, 2);
        }
    }//GEN-LAST:event_itemNuevoActionPerformed

    //Guarda un documento, dependiendo de si es un archivo por primera vez abierto
    //da la opcion al usuario de escoger donde se guardara
    private void itemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGuardarActionPerformed
        String texto = areaTexto.getText();
        if (file.verifyFile(path)) {
            file.saveFile(path, texto);
            withoutChange = true;
        } else {
            JFileChooser fc = new JFileChooser();
            path = "";
            try {
                if (fc.showSaveDialog(null) == fc.APPROVE_OPTION) {
                    try {
                        path = fc.getSelectedFile().getAbsolutePath() + ".txt";
                        withoutChange = true;
                    } catch (Exception e) {
                        System.out.println("se cancelo");
                    }
                }
                file.saveFile(path, texto);
            } catch (HeadlessException ex) {
                //ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_itemGuardarActionPerformed

    //Guarda el documento en una nueva ruta indicada por el usuario
    private void itemGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGuardarComoActionPerformed
        String texto = areaTexto.getText();
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Guardar Como");
        try {
            path = "";
            if (fc.showSaveDialog(null) == fc.APPROVE_OPTION) {
                try {
                    path = fc.getSelectedFile().getAbsolutePath() + ".txt";
                    withoutChange = true;
                } catch (Exception e) {
                    System.out.println("se cancelo");
                }
            }
            file.saveFile(path, texto);
        } catch (HeadlessException ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_itemGuardarComoActionPerformed

    //Analiza el texto, detecta errores y si no los hubiera muestra reporte de tokens aceptados
    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        String texto = areaTexto.getText();
        lc = new LexicControl(texto);
        if (lc.getErrores().isEmpty()) {
            int resp = JOptionPane.showConfirmDialog(null,
                    "Analisis lexico finalizado\n"
                    + "Desea comenzar el analisis sintactico?",
                    "Confirmar", JOptionPane.YES_NO_OPTION);
            if (resp == 0) {
                JFileChooser fc = new JFileChooser();
                fc.showOpenDialog(this);
                try {
                    path = fc.getSelectedFile().getAbsolutePath();
                    file.saveFile(path, "");
                } catch (Exception e) {
                    System.out.println("se cancelo");
                }
                sc = new SyntacticControl(lc.getTokensValidos());
                if (!sc.getErrores().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Se han encontrado errores sintacticos", 
                            "Informacion", JOptionPane.WARNING_MESSAGE);

                    file.eliminar(path);
                    tablaReporteErroresS();
                    abrirDialog(reporteErroresS);
                }else {
                    JOptionPane.showMessageDialog(null, "Analisis realizado correctamente");
                }
            }
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed

    //Muestra informacion del programador
    private void itemAcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAcercaActionPerformed
        String mensaje = "Proyecto Lenguajes Formales: \n\t\tAnalizador Lexico\n"
                + "\n\n\t\tAsael Hernadez\nEstudiante Ingenieria en Sistemas";
        JOptionPane.showMessageDialog(null, mensaje);
    }//GEN-LAST:event_itemAcercaActionPerformed

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        String texto = areaTexto.getText();
        lc = new LexicControl(texto);
        if (!lc.getErrores().isEmpty()) {
            tablaReporteErrores();
            abrirDialog(reporteErrores);
        } else {
            tablaReporteTokens();
            abrirDialog(reporteToken);
        }
    }//GEN-LAST:event_btnReportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnReport;
    private javax.swing.JLabel cordCursor;
    private javax.swing.JMenuItem itemAbrir;
    private javax.swing.JMenuItem itemAcerca;
    private javax.swing.JMenuItem itemAyuda;
    private javax.swing.JMenuItem itemCopiar;
    private javax.swing.JMenuItem itemCortar;
    private javax.swing.JMenuItem itemDeshacer;
    private javax.swing.JMenuItem itemGuardar;
    private javax.swing.JMenuItem itemGuardarComo;
    private javax.swing.JMenuItem itemNuevo;
    private javax.swing.JMenuItem itemPegar;
    private javax.swing.JMenuItem itemRehacer;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenu menuEditar;
    private javax.swing.JDialog reporteErrores;
    private javax.swing.JDialog reporteErroresS;
    private javax.swing.JDialog reporteToken;
    private javax.swing.JTable tableErrores;
    private javax.swing.JTable tableErroresS;
    private javax.swing.JTable tableTokens;
    // End of variables declaration//GEN-END:variables

    public static void setCambio(boolean change) {
        withoutChange = change;
    }

    //Oyente que detecta cuando un documento es editado
    public void cambiosSinGuardar(ActionEvent evt, int op) {
        String[] options = {"Guardar Cambios", "Desechar Cambios", "Cancelar"};
        int selection = JOptionPane.showOptionDialog(null, "Hay cambios sin guardar!",
                "Informacion", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,
                null, options, options[0]);

        switch (selection) {
            case 0:
                itemGuardarActionPerformed(evt);
                break;
            case 1:
                switch (op) {
                    case 0:
                        System.exit(0);
                        break;
                    case 1:
                        withoutChange = true;
                        itemAbrirActionPerformed(evt);
                        break;
                    case 2:
                        withoutChange = true;
                        itemNuevoActionPerformed(evt);
                        break;
                }
                break;
            case 2:

                break;
        }
    }

    //Valida el cierre para evitar perder datos en el documento
    private void validarCierre() {
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    if (withoutChange) {
                        System.exit(0);
                    } else {
                        cambiosSinGuardar(null, 0);
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //genera la tabla de reportes de tokens aceptados
    private void tablaReporteTokens() {
        DefaultTableModel model = (DefaultTableModel) tableTokens.getModel();
        model.setRowCount(0);

        ArrayList<TokenValido> listToken = lc.getTokensValidos();
        for (TokenValido t : listToken) {
            Object item[] = new Object[3];
            item[0] = t.getNombreToken();
            item[1] = t.getLexema();
            item[2] = t.getPosicion();
            model.addRow(item);
        }
        tableTokens.setModel(model);
    }

    //genera la tabla de errores encontrados en el documento
    private void tablaReporteErrores() {
        DefaultTableModel model = (DefaultTableModel) tableErrores.getModel();
        model.setRowCount(0);

        ArrayList<ErrorLexico> listError = lc.getErrores();
        for (ErrorLexico e : listError) {
            Object item[] = new Object[2];
            item[0] = e.getLexema();
            item[1] = e.getPosicion();
            model.addRow(item);
        }
        tableErrores.setModel(model);
    }
    
    private void tablaReporteErroresS() {
        DefaultTableModel model = (DefaultTableModel) tableErroresS.getModel();
        model.setRowCount(0);

        ArrayList<ErrorSintactico> listErrorS = sc.getErrores();
        for (ErrorSintactico t : listErrorS) {
            Object item[] = new Object[3];
            item[0] = t.getLexema();
            item[1] = t.getPosicion();
            model.addRow(item);
        }
        tableTokens.setModel(model);
    }

    //abre un JDialog
    private void abrirDialog(JDialog jd) {
        jd.setResizable(false);
        jd.setLocationRelativeTo(null);
        jd.setVisible(true);
    }

    public static String getPath() {
        return path;
    }
}
